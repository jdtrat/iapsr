% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/examineChoices.R
\name{getPhase1Optimal}
\alias{getPhase1Optimal}
\title{Determine if the neutral image is preferred to positive reinforcers}
\usage{
getPhase1Optimal(df, value, ID)
}
\arguments{
\item{df}{The data frame that contains the subject choice and rating data
(see examples).}

\item{value}{Logical: TRUE or FALSE signifying whether or not an individual
prefers the neutral gray image to positive reinforcers.}

\item{ID}{Character: Subject ID for whom we are determining preference.}
}
\value{
A data frame consisting of the phase 1 information for the specified
  subject. It has, in addition to the choice and rating information for a
  subject, an optimal column based on the subject's preference for the
  neutral image relative to the reinforcers.
}
\description{
This function takes in the data frame that contains the subject choice and
rating data as well as a TRUE/FALSE value signifying whether the subject
prefers the neutral gray image over the positive reinforcers as measured by
the average rating of the positive reinforcers showed and the rating for the
neutral image. It then mutates the data frame with an optimal column based on
their preference. Specifically, if an individual does prefer gray, then the
optimal choice is to choose icons that have the lowest probability of getting
a reinforcer. If they don't prefer gray, then the optimal choice is to choose
icons that have the highest probability of getting a reinforcer.
}
\examples{


choiced <- processChoiceData(sampleChoiceData) \%>\%
  dplyr::mutate(subject = "RJT", .before = phase)

rated <- processRatingsData(sampleRatingsData) \%>\%
  regSetup() \%>\%
  dplyr::mutate(subject = "RJT", .before = IAPS)

testDF <- dplyr::left_join(choiced,
rated \%>\% dplyr::rename(reinforcer = IAPS),
by = c("subject", "reinforcer")) \%>\%
dplyr::filter(reinforcer != "7006") \%>\%
dplyr::mutate(reinforcer =
base::ifelse(reinforcer == "neutral", "neutral", "reinforcer"))

testValue <- testDF \%>\%
  dplyr::filter(phase == 1) \%>\%
  dplyr::group_by(subject, reinforcer) \%>\%
  dplyr::summarize(meanPos = mean(positive), .groups = "drop") \%>\%
  tidyr::pivot_wider(names_from = reinforcer, values_from = meanPos) \%>\%
  dplyr::mutate(prefersGrayPositive = base::ifelse(neutral > reinforcer, TRUE, FALSE)) \%>\%
  dplyr::pull(prefersGrayPositive, subject) \%>\%
  base::as.list()

testID <- base::names(testValue)

iapsr:::getPhase1Optimal(testDF, testValue[[1]], testID)


}
