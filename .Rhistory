remove = FALSE,
sep = " , ") %>%
select(image, phase) %>%
mutate(image = stringr::str_remove(image, ".jpg"))
return(output)
}
map_df(phazes, ~getImageShown(.x))
phase$one %>% filter(str_detect(.$data, "SHOW: image"))
getImageShown <- function(phaseData){
output <- phaseData %>%
filter(str_detect(.$data, "SHOW: image")) %>%
mutate(data = str_remove_all(.$data, "SHOW: image - ")) %>%
separate(col = data,
into = c("image", "round"),
extra = "warn",
remove = FALSE,
sep = " , ") %>%
select(image, phase) %>%
mutate(image = stringr::str_remove(image, ".jpg"))
return(output)
}
getImageShown(phase$one)
map_df(phazes, ~getImageShown(.x))
map_df(phazes, ~getImageShown(.x)) %>% count(phase)
getIcons(phase$one)
getIcons(phase$three)
getChoices(phase$three)
getImageShown(phase$three)
iconz <- map_df(phazes, ~getIcons(.x))
imagezShown <- map_df(phazes, ~getImageShown(.x))
choicez <- map_df(phazes, ~getChoice(.x))
iconz
imagezShown
phase$one %>%
filter(str_detect(.$data, "SHOW: OPTION SELECTION")) %>%
separate(col = data,
into = c("show", "option", "selection", "icon", "order", "icon_group"),
extra = "drop",
sep = " ",
remove = TRUE) %>%
select(icon_group, phase) %>%
mutate(icon_group = str_remove_all(.$icon_group, "\"")) %>%
mutate(icon_group = str_remove_all(.$icon_group, "\\{")) %>%
mutate(icon_group = str_remove_all(.$icon_group, "\\}")) %>%
separate(col = icon_group, into = c("order1", "icon1", "icon2"),
extra = "warn",
remove = FALSE,
sep = ":") %>%
separate(col = icon1, into = c("icon1", "order2"),
extra = "warn",
remove = FALSE,
sep = ",") %>%
mutate(icon2 = str_remove_all(.$icon2, ",")) %>%
select(icon1, icon2, phase) %>%
mutate(round = row_number())
phase$one %>%
filter(str_detect(.$data, "SHOW: OPTION SELECTION")) %>%
separate(col = data,
into = c("show", "option", "selection", "icon", "order", "icon_group"),
extra = "drop",
sep = " ",
remove = TRUE) %>%
select(icon_group, phase) %>%
mutate(icon_group = str_remove_all(.$icon_group, "\"")) %>%
mutate(icon_group = str_remove_all(.$icon_group, "\\{")) %>%
mutate(icon_group = str_remove_all(.$icon_group, "\\}")) %>%
separate(col = icon_group, into = c("order1", "icon1", "icon2"),
extra = "warn",
remove = FALSE,
sep = ":") %>%
separate(col = icon1, into = c("icon1", "order2"),
extra = "warn",
remove = FALSE,
sep = ",") %>%
mutate(icon2 = str_remove_all(.$icon2, ","))
phase$one %>%
filter(str_detect(.$data, "SHOW: OPTION SELECTION")) %>%
separate(col = data,
into = c("show", "option", "selection", "icon", "order", "icon_group"),
extra = "drop",
sep = " ",
remove = TRUE) %>%
select(icon_group, phase) %>%
mutate(icon_group = str_remove_all(.$icon_group, "\"")) %>%
mutate(icon_group = str_remove_all(.$icon_group, "\\{")) %>%
mutate(icon_group = str_remove_all(.$icon_group, "\\}")) %>%
separate(col = icon_group, into = c("order1", "icon1", "icon2"),
extra = "warn",
remove = FALSE,
sep = ":") %>%
separate(col = icon1, into = c("icon1", "order2"),
extra = "warn",
remove = FALSE,
sep = ",") %>%
mutate(icon2 = str_remove_all(.$icon2, ",")) %>%
select(icon1, icon2, phase) %>%
mutate(round = row_number())
#'
#' @param phaseData
#' @param pivot Logical: pivoting the data makes it tidier, but makes it harder
#'   to join with the other information. For this reason, it is being set to
#'   FALSE by default.
#'
#' @return
#' @export
#'
#' @examples
getIcons <- function(phaseData, pivot = FALSE) {
icons <- phaseData %>%
filter(str_detect(.$data, "SHOW: OPTION SELECTION")) %>%
separate(col = data,
into = c("show", "option", "selection", "icon", "order", "icon_group"),
extra = "drop",
sep = " ",
remove = TRUE) %>%
select(icon_group, phase) %>%
mutate(icon_group = str_remove_all(.$icon_group, "\"")) %>%
mutate(icon_group = str_remove_all(.$icon_group, "\\{")) %>%
mutate(icon_group = str_remove_all(.$icon_group, "\\}")) %>%
separate(col = icon_group, into = c("order1", "icon1", "icon2"),
extra = "warn",
remove = FALSE,
sep = ":") %>%
separate(col = icon1, into = c("icon1", "order2"),
extra = "warn",
remove = FALSE,
sep = ",") %>%
mutate(icon2 = str_remove_all(.$icon2, ",")) %>%
select(icon1, icon2, phase) %>%
mutate(round = row_number())
if(pivot) {
icons <- icons %>%
pivot_longer(cols = c(icon1, icon2),
names_to = "image_order",
values_to = "icon") %>%
mutate(image_order = str_remove(.$image_order, "icon"),
image_order = as.numeric(image_order))
}
return(icons)
}
iconz <- map_df(phazes, ~getIcons(.x))
imagezShown <- map_df(phazes, ~getImageShown(.x))
choicez <- map_df(phazes, ~getChoice(.x))
bind_cols(iconz, imagezShown, choicez)
bind_cols(iconz, imagezShown, choicez) %>% View()
#' Get Choices for Each Round
#'
#' @param phaseData
#'
#' @return
#' @export
#'
#' @examples
getChoices <- function(phaseData) {
choices <- phaseData %>%
filter(str_detect(.$data, "HIGHLIGHT CHOICE")) %>%
mutate(data = str_remove_all(.$data, "HIGHLIGHT CHOICE: ")) %>%
separate(col = data,
into = c("wordOption", "option", "wordChoice", "choice", "wordGroup", "group", "roundWord", "round"),
extra = "warn",
remove = FALSE,
sep = " ") %>%
select(option, choice, group, phase) %>%
mutate(option = forcats::as_factor(str_remove_all(option, ",")),
choice = forcats::as_factor(str_remove_all(choice, ",")),
group = as_factor(str_remove_all(group, ",")),
round = as.numeric(row_number()))
return(choices)
}
phazes <- list(phase$one, phase$two, phase$three)
iconz <- map_df(phazes, ~getIcons(.x))
imagezShown <- map_df(phazes, ~getImageShown(.x))
choicez <- map_df(phazes, ~getChoice(.x))
bind_cols(iconz, imagezShown, choicez) %>% View()
choicez %>% View()
phase$one %>%
filter(str_detect(.$data, "HIGHLIGHT CHOICE")) %>%
mutate(data = str_remove_all(.$data, "HIGHLIGHT CHOICE: ")) %>%
separate(col = data,
into = c("wordOption", "option", "wordChoice", "choice", "wordGroup", "group", "roundWord", "round"),
extra = "warn",
remove = FALSE,
sep = " ")
phase$one %>%
filter(str_detect(.$data, "HIGHLIGHT CHOICE")) %>%
mutate(data = str_remove_all(.$data, "HIGHLIGHT CHOICE: ")) %>%
separate(col = data,
into = c("wordOption", "option", "wordChoice", "choice", "wordGroup", "group", "roundWord", "round"),
extra = "warn",
remove = FALSE,
sep = " ") %>%
select(option, choice, group, phase)
phase$one %>%
filter(str_detect(.$data, "HIGHLIGHT CHOICE")) %>%
mutate(data = str_remove_all(.$data, "HIGHLIGHT CHOICE: ")) %>%
separate(col = data,
into = c("wordOption", "option", "wordChoice", "choice", "wordGroup", "group", "roundWord", "round"),
extra = "warn",
remove = FALSE,
sep = " ") %>%
select(option, choice, group, phase) %>%
mutate(option = forcats::as_factor(str_remove_all(option, ",")),
choice = forcats::as_factor(str_remove_all(choice, ",")),
group = as_factor(str_remove_all(group, ",")),
round = as.numeric(row_number()))
phazes <- list(phase$one, phase$two, phase$three)
iconz <- map_df(phazes, ~getIcons(.x))
imagezShown <- map_df(phazes, ~getImageShown(.x))
choicez <- map_df(phazes, ~getChoices(.x))
bind_cols(iconz, imagezShown, choicez) %>% View()
#' Get Choices for Each Round
#'
#' @param phaseData
#'
#' @return
#' @export
#'
#' @examples
getChoices <- function(phaseData) {
choices <- phaseData %>%
filter(str_detect(.$data, "HIGHLIGHT CHOICE")) %>%
mutate(data = str_remove_all(.$data, "HIGHLIGHT CHOICE: ")) %>%
separate(col = data,
into = c("wordOption", "option", "wordChoice", "choice", "wordGroup", "group", "roundWord", "round"),
extra = "warn",
remove = FALSE,
sep = " ") %>%
select(option, choice, group, round, phase) %>%
mutate(option = forcats::as_factor(str_remove_all(option, ",")),
choice = forcats::as_factor(str_remove_all(choice, ",")),
group = as_factor(str_remove_all(group, ",")),
round = as.numeric(round))
return(choices)
}
rm(getChoice)
phazes <- list(phase$one, phase$two, phase$three)
iconz <- map_df(phazes, ~getIcons(.x))
imagezShown <- map_df(phazes, ~getImageShown(.x))
choicez <- map_df(phazes, ~getChoice(.x))
bind_cols(iconz, imagezShown, choicez) %>% View()
#' Get Images Shown for Each Round
#'
#' @param phaseData
#'
#' @return
#' @export
#'
#' @examples
getImageShown <- function(phaseData){
output <- phaseData %>%
filter(str_detect(.$data, "SHOW: image")) %>%
mutate(data = str_remove_all(.$data, "SHOW: image - ")) %>%
separate(col = data,
into = c("image", "round"),
extra = "warn",
remove = FALSE,
sep = " , ") %>%
select(image, phase) %>%
mutate(image = stringr::str_remove(image, ".jpg"),
round = row_number())
return(output)
}
phazes <- list(phase$one, phase$two, phase$three)
iconz <- map_df(phazes, ~getIcons(.x))
imagezShown <- map_df(phazes, ~getImageShown(.x))
choicez <- map_df(phazes, ~getChoice(.x))
bind_cols(iconz, imagezShown, choicez) %>% View()
?join
?inner_join()
phazes <- list(phase$one, phase$two, phase$three)
iconz <- map_df(phazes, ~getIcons(.x))
imagezShown <- map_df(phazes, ~getImageShown(.x))
choicez <- map_df(phazes, ~getChoices(.x))
bind_cols(iconz, choicez, image_shown) %>% View()
bind_cols(iconz, choicez, imagezShown) %>% View()
#' Get Choices for Each Round
#'
#' @param phaseData
#'
#' @return
#' @export
#'
#' @examples
getChoices <- function(phaseData) {
choices <- phaseData %>%
filter(str_detect(.$data, "HIGHLIGHT CHOICE")) %>%
mutate(data = str_remove_all(.$data, "HIGHLIGHT CHOICE: ")) %>%
separate(col = data,
into = c("wordOption", "option", "wordChoice", "choice", "wordGroup", "group", "roundWord", "round"),
extra = "warn",
remove = FALSE,
sep = " ") %>%
select(option, choice, group, round, phase) %>%
mutate(option = forcats::as_factor(str_remove_all(option, ",")),
choice = forcats::as_factor(str_remove_all(choice, ",")),
group = as_factor(str_remove_all(group, ",")),
round = as.numeric(round))
return(choices)
}
phazes <- list(phase$one, phase$two, phase$three)
iconz <- map_df(phazes, ~getIcons(.x))
imagezShown <- map_df(phazes, ~getImageShown(.x))
choicez <- map_df(phazes, ~getChoices(.x))
bind_cols(iconz, choicez, imagezShown) %>% View()
choicez %>% View()
phase$one %>%
filter(str_detect(.$data, "HIGHLIGHT CHOICE")) %>%
mutate(data = str_remove_all(.$data, "HIGHLIGHT CHOICE: ")) %>%
separate(col = data,
into = c("wordOption", "option", "wordChoice", "choice", "wordGroup", "group", "roundWord", "round"),
extra = "warn",
remove = FALSE,
sep = " ") %>%
select(option, choice, group, round, phase)
phase$two %>%
filter(str_detect(.$data, "HIGHLIGHT CHOICE")) %>%
mutate(data = str_remove_all(.$data, "HIGHLIGHT CHOICE: ")) %>%
separate(col = data,
into = c("wordOption", "option", "wordChoice", "choice", "wordGroup", "group", "roundWord", "round"),
extra = "warn",
remove = FALSE,
sep = " ") %>%
select(option, choice, group, round, phase) %>%
mutate(option = forcats::as_factor(str_remove_all(option, ",")),
choice = forcats::as_factor(str_remove_all(choice, ",")),
group = as_factor(str_remove_all(group, ",")),
round = as.numeric(round))
#' Get Choices for Each Round
#'
#' @param phaseData
#'
#' @return
#' @export
#'
#' @examples
getChoices <- function(phaseData) {
choices <- phaseData %>%
filter(str_detect(.$data, "HIGHLIGHT CHOICE")) %>%
mutate(data = str_remove_all(.$data, "HIGHLIGHT CHOICE: ")) %>%
separate(col = data,
into = c("wordOption", "option", "wordChoice", "choice", "wordGroup", "group", "roundWord", "round"),
extra = "warn",
remove = FALSE,
sep = " ") %>%
select(option, choice, group, round, phase) %>%
mutate(option = forcats::as_factor(str_remove_all(option, ",")),
choice = forcats::as_factor(str_remove_all(choice, ",")),
group = as_factor(str_remove_all(group, ",")),
round = row_number())
return(choices)
}
phazes <- list(phase$one, phase$two, phase$three)
iconz <- map_df(phazes, ~getIcons(.x))
imagezShown <- map_df(phazes, ~getImageShown(.x))
choicez <- map_df(phazes, ~getChoices(.x))
bind_cols(iconz, choicez, imagezShown) %>% View()
full_join(iconz, choicez)
full_join(full_join(iconz, choicez), imagezShown)
imagezShown
?new.env
processChoiceData <- function(data){
getPhases(data)
phases <- list(phase$one, phase$two, phase$three)
icons <- map_df(phases, ~getIcons(.x))
images <- map_df(phases, ~getImageShown(.x))
choices <- map_df(phases, ~getChoices(.x))
combined <- full_join(icons, choices) %>%
full_join(images)
return(combined)
}
testJoin <- full_join(full_join(iconz, choicez), imagezShown)
testJoin <- full_join(full_join(iconz, choicez, by = c("phase", "round")), imagezShown)
testJoin <- full_join(full_join(iconz, choicez, by = c("phase", "round")), imagezShown, by = c("phase", "round"))
processChoiceData <- function(data){
getPhases(data)
phases <- list(phase$one, phase$two, phase$three)
icons <- map_df(phases, ~getIcons(.x))
images <- map_df(phases, ~getImageShown(.x))
choices <- map_df(phases, ~getChoices(.x))
combined <- full_join(icons, choices, by = c("phase", "round")) %>%
full_join(images, by = c("phase", "round"))
return(combined)
}
testProc <- processChoiceData(data = rawDataChoice)
testProc
all_equal(testProc, testJoin)
devtools::document()
?separate
usethis::use_package("purrr")
devtools::document()
rm(list = c("getChoices", "getGroupRewardProbs", "getIcons", "getImageShown", "getPhases", "phase", "processChoiceData"))
devtools::document()
?iapsr::getPhases
getIcons(phase$one)
iapsr::getChoices(phase$one)
getPhases(rawDataChoice)
iapsr::getChoices(phase$one)
iapsr::getIcons(phase$one)
phase$one %>% filter(stringr::str_detect(.$data, "HIGHLIGHT CHOICE"))
getImageShown(phase$three)
processChoiceData(rawDataChoice)
library(purrr)
processChoiceData(rawDataChoice)
devtools::document()
devtools::document()
devtools::document()
processChoiceData(rawDataChoice)
devtools::document()
processChoiceData(rawDataChoice)
devtools::document()
?iapsr::processChoiceData()
getGroupRewardProbs(phase$two)
getPhases(rawDataChoice)
getGroupRewardProbs(phase$two)
phase$two
phase$two %>% dplyr::slice(1)
devtools::document()
getPhases(rawDataChoice)
getGroupRewardProbs(phase$two)
?pivot_longer
devtools::document()
getPhases(rawDataChoice)
getGroupRewardProbs(phase$two)
getGroupRewardProbs(phase$one)
getGroupRewardProbs(phase$three)
#' Get Group Reward and Probability Info
#'
#' @param phaseData One of the three phase objects defined by calling \code{\link{getPhases}}.
#'
#' @return
#' @export
#'
#' @examples
getGroupRewardProbs <- function(phaseData) {
#subset the phaseData into just the relevant data column to test for which phase it is.
testPhase <- phaseData %>%
dplyr::slice(1) %>%
dplyr::select(-c(row, phase))
if (stringr::str_detect(testPhase, "Phase 1 Group")) {
output <- phaseData %>%
dplyr::slice(1) %>%
dplyr::mutate(data = stringr::str_remove_all(.$data, "Phase 1 Group \\{Reward, Probability\\}: "))
}else if (stringr::str_detect(testPhase, "Phase 2 Group")) {
output <- phaseData %>%
dplyr::slice(1) %>%
dplyr::mutate(data = stringr::str_remove_all(.$data, "Phase 2 Group \\{Reward, Probability\\}: "))
}else if (stringr::str_detect(testPhase, "Phase 3 Group")) {
output <- phaseData %>%
dplyr::slice(1) %>%
dplyr::mutate(data = stringr::str_remove_all(.$data, "Phase 3 Group \\{Reward, Probability\\}: "))
}
output <- output %>%
tidyr::separate(col = data,
into = c("1", "2", "3", "4", "5", "6"),
extra = "warn",
remove = TRUE,
sep = "\\},") %>%
dplyr::select(-row) %>%
dplyr::mutate(`1` = stringr::str_remove(`1`, "Group 1 \\{\\$"),
`2` = stringr::str_remove(`2`, "Group 2 \\{\\$"),
`3` = stringr::str_remove(`3`, "Group 3 \\{\\$"),
`4` = stringr::str_remove(`4`, "Group 4 \\{\\$"),
`5` = stringr::str_remove(`5`, "Group 5 \\{\\$"),
`6` = stringr::str_remove(`6`, "Group 6 \\{\\$")) %>%
tidyr::pivot_longer(cols = -phase,
names_to = "group",
values_to = "info") %>%
dplyr::mutate(info = stringr::str_trim(info),
info = stringr::str_remove_all(info, ","),
info = stringr::str_remove_all(info, "\\}"),
info = stringr::str_remove_all(info, "%")) %>%
tidyr::separate(col = info,
into = c("reward", "probability"),
extra = "warn",
remove = TRUE,
sep = " ") %>%
dplyr::mutate(group = forcats::as_factor(group),
probability = base::as.numeric(probability),
probability = probability/100) %>%
tidyr::drop_na()
iapsr::getPhases(data)
phases <- list(phase$one, phase$two, phase$three)
allPhaseOutput <- purrr:map_df(phases, ~iapsr::getGroupRewardProbs(.x))
return(allPhaseOutput)
}
getGroupRewardProbs()
getGroupRewardProbs(phase$one)
devtools::document()
rm(getGroupRewardProbs())
rm(getGroupRewardProbs)
devtools::document()
devtools::document()
getGroupInfo(rawDataChoice)
getGroupRewardProbs(phase$one)
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
library(iapsr)
iapsr::processChoiceData(rawDataChoice)
iapsr::processChoiceData(rawDataChoice) %>% View()
?iapsr::getPhases()
usethis::use_package_doc()
devtools::document()
?iapsr
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
