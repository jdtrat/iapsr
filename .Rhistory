theme(legend.position = "none",
panel.background = element_rect(fill = "aliceblue"),
plot.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_blank(),
panel.grid.minor = element_line(color = "lightblue1"))
psychCondtionCount <- dem.tab %>% count(condition_description) %>%
drop_na() %>%
mutate(condition_description = fct_reorder(condition_description, desc(n))) %>%
ggplot(aes(x = condition_description, y = n, fill = condition_description)) +
geom_col() +
labs(y = "Count",
x = "Psychiatric Condition",
title = "Subject Psychiatric Condition Demographic",
subtitle = "Original Cohort") +
myGGTheme +
theme(legend.position = "none",
panel.background = element_rect(fill = "aliceblue"),
plot.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_blank(),
panel.grid.minor = element_line(color = "lightblue1"))
alcoholCount <- dem.tab %>% count(alcohol_current) %>%
drop_na() %>%
ggplot(aes(x = alcohol_current, y = n, fill = alcohol_current)) +
geom_bar(stat = "identity") +
geom_col() +
labs(y = "Count",
x = "Current Alcohol Users",
title = "Subject Alcohol Use Demographic",
subtitle = "Original Cohort") +
myGGTheme +
scale_x_discrete(limits= "Yes", "No") +
theme(legend.position = "none",
panel.background = element_rect(fill = "aliceblue"),
plot.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_blank(),
panel.grid.minor = element_line(color = "lightblue1"))
drugsCount <- dem.tab %>% count(drugs_current) %>%
drop_na() %>%
ggplot(aes(x = drugs_current, y = n, fill = drugs_current)) +
geom_bar(stat = "identity") +
geom_col() +
labs(y = "Count",
x = "Current Marijuana Users",
title = "Subject Marijuana Use Demographic",
subtitle = "Original Cohort") +
myGGTheme +
scale_x_discrete(limits= "Yes", "No") +
theme(legend.position = "none",
panel.background = element_rect(fill = "aliceblue"),
plot.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_blank(),
panel.grid.minor = element_line(color = "lightblue1"))
smokeCount <- dem.tab %>% count(smoke_current) %>%
drop_na() %>%
ggplot(aes(x = smoke_current, y = n, fill = smoke_current)) +
geom_bar(stat = "identity") +
geom_col() +
labs(y = "Count",
x = "Current Smokers",
title = "Subject Smoking Demographic",
subtitle = "Original Cohort") +
myGGTheme +
scale_x_discrete(labels = c("Yes", "No")) +
theme(legend.position = "none",
panel.background = element_rect(fill = "aliceblue"),
plot.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_blank(),
panel.grid.minor = element_line(color = "lightblue1"))
(raceCount | ageCount | genderCount)/ (alcoholCount | drugsCount | smokeCount)/ psychCondtionCount
#preview the regression data frame for subject SFA_1025
head(finalData, 10)
#preview the regression data frame for subject IAPS_B_01
head(newCohortFinalData, 10)
#read in demographics
demographics <- read_csv(file = 'C:/Users/rachjone/Desktop/IAPS/Demographics/KLRIF_2018-07-09.csv')
#tidy the demographics data
tidyDems <- demographics %>%
rename(subject = "Subject ID",
age = "Age (years)",
gender = "What is your gender?") %>%
mutate(subject = str_replace(subject, "\\-", "\\_"),
gender = recode(gender, "Male" = 1, "Female" = 0)) %>%
select(subject, age, gender)
#Tidy the data and filter to only display demographic variables of interest (age, gender, race, ethnicity, history of psychiatric condition and medications, and current drug, alcohol, and smoking use.)
tidyDems2 <- Dems %>%
clean_names %>%
select(participant_id, gender, race_1:race_6, age, psychiatric_condition, condition_description, smoke_current, alcohol_current, drugs_current, current_use_description) %>%
pivot_longer(cols = c(race_1:race_6), values_to = "race") %>%
rename(subject = participant_id) %>%
mutate(name = recode(name, race_1 = "Asian", race_2 = "NHPI", race_3 = "AIAN", race_4 = "Black", race_5 = "White", race_6 = "Other"),
gender = recode(gender, "1" = "0", "2" = "1"),
current_use_description = recode(current_use_description, "marijuana" = "Marijuana"),
subject = str_replace(subject, "\\-", "\\_")) %>%
filter(race == "1" | subject == "SFA_1034" | subject == "SFA_1039" | subject == "SFA_1049" | subject == "SFA_1071") %>%
distinct (subject, race, .keep_all = TRUE)
#Join table with the 47 subjects we used for our analyses. This gets rid of extra subjects we did not include for the old cohort (There were 84 total, and we only used 47 in our analyse).
finalData <- full_join(positiveRatings, negativeRatings, by = c("IAPS", "subject", "form")) %>%
select(-c(order.x, order.y)) %>%
full_join(keyIAPS, by = c("IAPS", "form")) %>%
full_join(tidyDems, by = "subject") %>%
drop_na() %>%
select(subject, age, gender,
form, IAPS, desc,
positive, negative, everything())
finalData2 <- finalData %>%
select(-c(age:dom1sd)) %>%
distinct()
DemJoin <- right_join(tidyDems2, finalData2, by = "subject")
#Load packages
library(tidyverse)
library(tidymodels)
library(patchwork)
library(fs)
library(tictoc)
library(caret)
library(janitor)
library(dplyr)
library(knitr)
library(kableExtra)
library(flextable)
library(magick)
myGGTheme <- ggplot2::theme(plot.title = ggplot2::element_text(hjust=0.5, face = "bold.italic", size=16), #plot title aesthetics
plot.subtitle = ggplot2::element_text(hjust = 0.5, face = "bold", size = 12), #plot subtitle aesthetics
axis.title.x = ggplot2::element_text(size = 12, color= "black", face = "bold"), #x axis title aesthetics
axis.title.y = ggplot2::element_text(size = 12, color= "black", face = "bold"), #y axis title aesthetics
axis.text.x = ggplot2::element_text(angle = 0, hjust = 0.5, size = 12),
#legend aesthetics
legend.title = ggplot2::element_text(size= 14,
color = "black",
face = "bold"),
legend.title.align = 0.5,
legend.text = ggplot2::element_text(size = 10,
color = "black",
face = "bold"),
legend.text.align = 0)
#Import the IAPS key data set
keyIAPS <- filesIAPS %>%
map_df(~read_csv(.x, na = c("", ".", NA),
col_types = cols(IAPS = col_character())) %>%
select(desc:dom1sd) %>%
drop_na(),
.id = "form") %>%
mutate(form = case_when(str_detect(form, "1_IAPS") ~ 1,
str_detect(form, "2_IAPS") ~ 2,
str_detect(form, "3_IAPS") ~ 3,
str_detect(form, "4_IAPS") ~ 4),
form = as.factor(form))
library(tidyverse)
library(tidymodels)
library(patchwork)
library(janitor)
library(fs)
library(tictoc)
library(vip)
library(caret)
library(janitor)
library(dplyr)
library(xtable)
library(knitr)
library(kableExtra)
library(patchwork)
library(flextable)
library(magick)
library(webshot2)
library(iapsr)
tidyDems <- demographics %>%
#rename variables
rename(subject = "Subject ID",
age = "Age (years)",
gender = "What is your gender?") %>%
#make subject characters line up with others and recode gender as binary for
#regression purposes
mutate(subject = str_replace(subject, "\\-", "\\_"),
gender = recode(gender, "Male" = 1, "Female" = 0)) %>%
#select only relevant variables
select(subject, age, gender)
#join the imageOrder and subject data by subject, form, and order.
orderedSubjectData <- full_join(imageOrder, subjectData, by = c("form", "subject", "order")) %>%
rename(picID = value)
#Label the orderedSubjectData with a column that has the type of question asked
#based on the picID's P or N. Then rename the picID column as IAPS, removing any
#"P" or "N" at the end, so the names are the same as in the keyIAPS dataframe.
labeledOrderedSubjectData <- orderedSubjectData %>%
mutate(question = case_when(str_detect(picID, "P") ~ "positive",
str_detect(picID, "N") ~ "negative",
TRUE ~ "Oops"),
picID = str_remove_all(picID, "P|N")) %>%
rename(IAPS = picID)
#create positiveRatings as a dataframe that has IAPS data from the rounds where
#it was asked how positive the image made them feel. Then combine the rating and
#question data into one column that has the ratings for when the question was
#about positive feelings. I could've done this using the following code instead.
#Same thing.
#labeledOrderedSubjectData %>%
#  filter(question == "positive") %>%
#  select(-question) %>%
#  rename(positive = rating))
positiveRatings <- labeledOrderedSubjectData %>%
filter(question == "positive") %>%
pivot_wider(names_from = question, values_from = rating)
negativeRatings <- labeledOrderedSubjectData %>%
filter(question == "negative") %>%
pivot_wider(names_from = question, values_from = rating)
#Combine the positive and negative ratings data by IAPS, subject, and form.
#Could've just used IAPS but just more specificity. Then remove miscellaneous
#order column and join that with the IAPS key. Then join that with the
#demographics info. Then remove NAs since there are some images participants saw
#that are not standardized in the IAPS key (and one participant who has no
#gender data and we exclude). The final data has 14 columns and 5640 rows and
#consists of 120 positive and negative ratings from 47 subjects.
finalData <- full_join(positiveRatings, negativeRatings, by = c("IAPS", "subject", "form")) %>%
select(-c(order.x, order.y)) %>%
full_join(keyIAPS, by = c("IAPS", "form")) %>%
full_join(tidyDems, by = "subject") %>%
drop_na() %>%
select(subject, age, gender,
form, IAPS, desc,
positive, negative, everything())
# Create the final data to perform regressions by setting up the new cohort
# ratings data using the iapsr regSetup function, joining that with the new
# cohort demographics information by subject, and joining that by the IAPS
# ratings key.
newCohortFinalData <- newCohortRatings %>%
#remove a picture not in the IAPS key
filter(picture != "7037") %>%
regSetup() %>%
left_join(newCohortDems, by = "subject") %>%
left_join(keyIAPS, by = "IAPS")
#tidy the demographics data
tidyDems <- demographics %>%
#rename variables
rename(subject = "Subject ID",
age = "Age (years)",
gender = "What is your gender?") %>%
#make subject characters line up with others and recode gender as binary for
#regression purposes
mutate(subject = str_replace(subject, "\\-", "\\_"),
gender = recode(gender, "Male" = 1, "Female" = 0)) %>%
#select only relevant variables
select(subject, age, gender)
#join the imageOrder and subject data by subject, form, and order.
orderedSubjectData <- full_join(imageOrder, subjectData, by = c("form", "subject", "order")) %>%
rename(picID = value)
#Label the orderedSubjectData with a column that has the type of question asked
#based on the picID's P or N. Then rename the picID column as IAPS, removing any
#"P" or "N" at the end, so the names are the same as in the keyIAPS dataframe.
labeledOrderedSubjectData <- orderedSubjectData %>%
mutate(question = case_when(str_detect(picID, "P") ~ "positive",
str_detect(picID, "N") ~ "negative",
TRUE ~ "Oops"),
picID = str_remove_all(picID, "P|N")) %>%
rename(IAPS = picID)
positiveRatings <- labeledOrderedSubjectData %>%
filter(question == "positive") %>%
pivot_wider(names_from = question, values_from = rating)
#create negativeRatings as a dataframe that has IAPS data from the rounds where
#it was asked how negative the image made them feel. Then combine the
#rating and question data into one column that has the ratings for when the
#question was about negative feelings.
negativeRatings <- labeledOrderedSubjectData %>%
filter(question == "negative") %>%
pivot_wider(names_from = question, values_from = rating)
#Combine the positive and negative ratings data by IAPS, subject, and form.
#Could've just used IAPS but just more specificity. Then remove miscellaneous
#order column and join that with the IAPS key. Then join that with the
#demographics info. Then remove NAs since there are some images participants saw
#that are not standardized in the IAPS key (and one participant who has no
#gender data and we exclude). The final data has 14 columns and 5640 rows and
#consists of 120 positive and negative ratings from 47 subjects.
finalData <- full_join(positiveRatings, negativeRatings, by = c("IAPS", "subject", "form")) %>%
select(-c(order.x, order.y)) %>%
full_join(keyIAPS, by = c("IAPS", "form")) %>%
full_join(tidyDems, by = "subject") %>%
drop_na() %>%
select(subject, age, gender,
form, IAPS, desc,
positive, negative, everything())
# Create the final data to perform regressions by setting up the new cohort
# ratings data using the iapsr regSetup function, joining that with the new
# cohort demographics information by subject, and joining that by the IAPS
# ratings key.
newCohortFinalData <- newCohortRatings %>%
#remove a picture not in the IAPS key
filter(picture != "7037") %>%
regSetup() %>%
left_join(newCohortDems, by = "subject") %>%
left_join(keyIAPS, by = "IAPS")
dem.tab %>% View()
raceCount <- dem.tab %>% count(race) %>%
drop_na() %>%
mutate(race = fct_reorder(race, desc(n))) %>%
ggplot(aes(x = race, y = n, fill = race)) +
geom_col() +
labs(y = "Count",
x = "Race",
#caption = "Four subjects were removed because they ommitted their race.",
title = "Subject Race Demographic",
subtitle = "Original Cohort") +
myGGTheme +
scale_x_discrete(labels = c("White", "Black", "Asian", "Other")) +
theme(legend.position = "none",
panel.background = element_rect(fill = "aliceblue"),
plot.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_blank(),
panel.grid.minor = element_line(color = "lightblue1"))
devtools::document()
devtools::install_github("r-lib/roxygen2")
devtools::document()
?iapsr::sampleChoiceData
devtools::check()
library(iapsr)
plotPercentOptimal(processChoiceData(sampleChoiceData))
plotPercentOptimal(processChoiceData(sampleChoiceData) %>% mutate(subject = "SAMPLE"))
processChoiceData(sampleChoiceData)
devtools::document()
devtools::load_all()
processChoiceData(sampleChoiceData)
processChoiceData(sampleChoiceData) %>% plotPercentOptimal()
names(processChoiceData())
names(processChoiceData(sampleChoiceData))
"phase" %in% names(processChoiceData(sampleChoiceData))
"subject" %in% names(processChoiceData(sampleChoiceData))
!"subject" %in% names(processChoiceData(sampleChoiceData))
x <- NULL
is.null(x)
!is.null(x)
devtools::load_all()
processChoiceData(sampleChoiceData) %>% plotPercentOptimal()
devtools::load_all()
processChoiceData(sampleChoiceData) %>% plotPercentOptimal()
processChoiceData(sampleChoiceData) %>% plotPercentOptimal(subjectName = x)
processChoiceData(sampleChoiceData) %>% plotPercentOptimal(subjectName = "X")
processChoiceData(sampleChoiceData) %>% plotPercentOptimal(subjectName = 'x')
devtools::check()
devtools::check()
getPhases(sampleChoiceData)
phase
rm(phase)
phase$one
getPhases(sampleChoiceData)
library(iapsr)
getPhases(sampleChoiceData)
iapsr::getPhases(sampleChoiceData)
devtools::check()
sampleChoiceData %>% head()
sampleChoiceData %>% View()
getPhases(sampleChoiceData)
phase$one
phase$three
phase$three %>% slice_tail(1)
sampleChoiceData %>% slice(1657:1700)
sampleChoiceData %>% slice(1645:1700)
usethis::use_pipe()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
library(iapsr)
getPicID()
sampleChoiceData
sampleChoiceData %>% View()
getPhases(sampleChoiceData)
getPhases(sampleChoiceData)
phase$one
iapsr::phase$one
iapsr::getPhases(sampleChoiceData)
devtools::load_all()
getPhases(sampleChoiceData)
phase$one
slice(sampleChoiceData, 887)
slice(sampleChoiceData, 1861)
getIcons(phase$one)
getIcons(phase$two)
getGroupRewardProbs(phase$two)
getGroupInfo(sampleChoiceData)
getGroupInfo(sampleChoiceData) %>% count(icon)
getGroupInfo(sampleChoiceData) %>% select(-phase) %>% count(icon)
getGroupInfo(sampleChoiceData) %>% ungroup() %>% count(icon)
slice(sampleChoiceData, 1861)
slice(sampleChoiceData, 232)
slice(sampleChoiceData, 225)
slice(sampleChoiceData, 227)
load_all
devtools::load_all()
getPhases(sampleChoiceData)
phase$initIcon
slice(sampleChoiceData, 1855:1860)
phase$three %>% slice_tail()
devtools::load_all()
getPhases(sampleChoiceData)
phase$finalIcon
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::load_all()
getPhases(sampleChoiceData)
parent.env(phase)
devtools::check()
devtools::check()
readRatings('../../IAPS_SAMPLErating.txt.txt')
sampleRatingsData <- readRatings('../../IAPS_SAMPLErating.txt.txt')
usethis::use_data(sampleRatingsData)
devtools::document()
devtools::check()
sampleRatingsData %>% processRatingsData()
?getPicID()
?getPicID(sampleRatingsData)
getPicID(sampleRatingsData)
getPicID
devtools::load_all()
sampleRatingsData
data <- processRatingsData(sampleRatingsData)
dplyr::filter(stringr::str_detect(.data$data, "Image"))
data %>%
dplyr::filter(stringr::str_detect(.data$data, "Image"))
data %>%
dplyr::filter(stringr::str_detect(data, "Image"))
data
data <- sampleRatingsData
data %>%
dplyr::filter(stringr::str_detect(data, "Image"))
data %>%
dplyr::filter(stringr::str_detect(data, "Image")) %>%
dplyr::filter(!stringr::str_detect(data, "ROUND 0"))
data %>%
dplyr::filter(stringr::str_detect(data, "Image")) %>%
dplyr::filter(!stringr::str_detect(data, "ROUND 0")) %>%
tidyr::separate(col = data,
into = c("show", "image", "hyphen", "id", "round", "roundNumber"),
extra = "drop",
sep = " ",
remove = FALSE)
data %>%
dplyr::filter(stringr::str_detect(data, "Image")) %>%
dplyr::filter(!stringr::str_detect(data, "ROUND 0")) %>%
tidyr::separate(col = data,
into = c("show", "image", "hyphen", "id", "round", "roundNumber"),
extra = "drop",
sep = " ",
remove = FALSE) %>%
dplyr::select("id")
data %>%
dplyr::filter(stringr::str_detect(data, "Image")) %>%
dplyr::filter(!stringr::str_detect(data, "ROUND 0")) %>%
tidyr::separate(col = data,
into = c("show", "image", "hyphen", "id", "round", "roundNumber"),
extra = "drop",
sep = " ",
remove = FALSE) %>%
dplyr::select(id)
all_equal(data %>%
dplyr::filter(stringr::str_detect(data, "Image")) %>%
dplyr::filter(!stringr::str_detect(data, "ROUND 0")) %>%
tidyr::separate(col = data,
into = c("show", "image", "hyphen", "id", "round", "roundNumber"),
extra = "drop",
sep = " ",
remove = FALSE) %>%
dplyr::select(id),
data %>%
dplyr::filter(stringr::str_detect(data, "Image")) %>%
dplyr::filter(!stringr::str_detect(data, "ROUND 0")) %>%
tidyr::separate(col = data,
into = c("show", "image", "hyphen", "id", "round", "roundNumber"),
extra = "drop",
sep = " ",
remove = FALSE) %>%
dplyr::select("id"))
data %>%
dplyr::filter(stringr::str_detect(data, "Image")) %>%
dplyr::filter(!stringr::str_detect(data, "ROUND 0")) %>%
tidyr::separate(col = data,
into = c("show", "image", "hyphen", "id", "round", "roundNumber"),
extra = "drop",
sep = " ",
remove = FALSE) %>%
dplyr::select(id) %>%
dplyr::transmute(picture = stringr::str_remove(id, ".jpg,"))
all_equal(data %>%
dplyr::filter(stringr::str_detect(data, "Image")) %>%
dplyr::filter(!stringr::str_detect(data, "ROUND 0")) %>%
tidyr::separate(col = data,
into = c("show", "image", "hyphen", "id", "round", "roundNumber"),
extra = "drop",
sep = " ",
remove = FALSE) %>%
dplyr::select(id) %>%
dplyr::transmute(picture = stringr::str_remove(id, ".jpg,")),
data %>%
dplyr::filter(stringr::str_detect(data, "Image")) %>%
dplyr::filter(!stringr::str_detect(data, "ROUND 0")) %>%
tidyr::separate(col = data,
into = c("show", "image", "hyphen", "id", "round", "roundNumber"),
extra = "drop",
sep = " ",
remove = FALSE) %>%
dplyr::select("id") %>%
dplyr::transmute(picture = stringr::str_remove(id, ".jpg,")))
devtools::document()
devtools::load_all()
devtools::check()
library(iapsr)
processRatingsData(sampleRatingsData)
getPicID(sampleRatingsData)
?getPhases
devtools::load_all()
?getPhases
devtools::document()
